[n.global]
output = nimnuklear

[n.include]
nimnuklear/src

[n.prepare]
gitremote = "https://github.com/vurtun/nuklear"
gitsparse = """
src/*
"""

[nuklear.h]
preprocess = true
defines = true
recurse = true

compile = nimnuklear/src/*.c
flags = "--prefix:nk__ --prefix:nk_ --prefix:NK_ --cdecl"
pragma.1 = "passC: \"-DNK_INCLUDE_FIXED_TYPES -DNK_INCLUDE_STANDARD_IO\""
pragma.2 = "passC: \"-DNK_INCLUDE_FONT_BAKING -DNK_INCLUDE_DEFAULT_ALLOCATOR\""
pragma.3 = "passC: \"-DNK_INCLUDE_VERTEX_BUFFER_OUTPUT -DNK_INCLUDE_DEFAULT_FONT\""
pragma-win = "passC: \"-DNK_INCLUDE_STANDARD_VARARGS\""

ppflags = "-DNK_INCLUDE_FIXED_TYPES -DNK_INCLUDE_STANDARD_IO -DNK_INCLUDE_FONT_BAKING -DNK_INCLUDE_DEFAULT_ALLOCATOR -DNK_INCLUDE_VERTEX_BUFFER_OUTPUT -DNK_INCLUDE_DEFAULT_FONT"

search.1 = "#define NK_UINT_MAX"
comment.1 = 1

[nimnuklear/nuklear.nim]
search.0 = "\r"
replace.0 = ""

regex.1 = "((?s:proc [`a-z]+.*?headernuklear.}\n))"
move.1 = "{.importc: \"seq\".}: cuint\n\n"

search.2 = "\ntype\n"
replace.2 = "\n"

regex.3 = "((?s:  _dummy_array.*?const))"
replace.3 = "const"

search.4 = "  char*"
prepend.4 = "type\n"

search.5 = "  color*"
prepend.5 = "type\n"

search.6 = "  table*"
comment.6 = 1

search.8 = "float* = f"
comment.8 = 1

search.9 = "UTF_INVALID"
replace.9 = "#UTF_INVALID"

search.10 = """text_edit* {.importc: "nk_text_edit", header: headernuklear"""
comment.10 = 1

regex.11 = """    WIDGET_STATE_([A-Z]+) = WIDGET_STATE_([A-Z]+) or WIDGET_STATE_([A-Z]+)[,]?"""
replace.11 = ""

regex.12 = """TEXT_ALIGN_([A-Z]+) or TEXT_ALIGN_([A-Z]+)[,]*"""
replace.12 = "TEXT_ALIGN_$1.int32 or TEXT_ALIGN_$2.int32"

search.13 = "  image*"
replace.13 = "  img*"

search.14 = "ptr image"
replace.14 = "ptr img"

search.15 = ": image"
replace.15 = ": img"

regex.16 = """(?s:EDIT_FIELD =.*?\n\n)"""
replace.16 = """EDIT_FIELD = EDIT_SIMPLE.int32 or EDIT_SELECTABLE.int32 or EDIT_CLIPBOARD.int32,  
    EDIT_EDITOR = EDIT_SELECTABLE.int32 or EDIT_MULTILINE.int32 or EDIT_ALLOW_TAB.int32 or EDIT_CLIPBOARD.int32,
    EDIT_BOX = EDIT_ALWAYS_INSERT_MODE.int32 or EDIT_SELECTABLE.int32 or EDIT_MULTILINE.int32 or EDIT_ALLOW_TAB.int32 or EDIT_CLIPBOARD.int32"""
  
search.17 = "color_f*"
replace.17 = "nk_color_f*"

regex.18 = """proc vec2([i]?)\*"""
replace.18 = "proc newVec2$1*"

regex.19 = """proc rect([i]?)\*"""
replace.19 = "proc newRect$1*"

search.21 = """const
  WINDOW_DYNAMIC = WINDOW_PRIVATE
"""
move.21 = "{.importc: \"seq\".}: cuint\n\n"

search.22 = "{.importc: \"seq\".}: cuint\n\n"
append.22 = """const WIDGET_STATE_HOVERED* = widget_states(WIDGET_STATE_HOVER.int32 or WIDGET_STATE_MODIFIED.int32)
const WIDGET_STATE_ACTIVE* = widget_states(WIDGET_STATE_ACTIVED.int32 or WIDGET_STATE_MODIFIED.int32)
"""

search.23 = "  user_font_glyph*"
comment.23 = 1

regex.24 = """(?s:PANEL_SET_NONBLOCK =.*?\n\n)"""
replace.24 = """PANEL_SET_NONBLOCK = PANEL_CONTEXTUAL.int32 or PANEL_COMBO.int32 or PANEL_MENU.int32 or
    PANEL_TOOLTIP.int32,
    PANEL_SET_POPUP = PANEL_SET_NONBLOCK.int32 or PANEL_POPUP.int32,
    PANEL_SET_SUB = PANEL_SET_POPUP.int32 or PANEL_GROUP.int32
"""

search.25 = "WINDOW_ROM or WINDOW_NO_INPUT"
replace.25 = "WINDOW_ROM.int32 or WINDOW_NO_INPUT.int32"

prepend.26 = """macro find_size(a,b: untyped): untyped =
  if sizeof(a) < sizeof(b):
    sizeof(b)
  else:
    sizeof(a) div sizeof(uint32) div 2
"""

regex.27 = """(?s:array\[\(.*?\])"""
replace.27 = "array[find_size(window, panel), uint32]"

regex.28 = """([u]?int[\d]+)_t"""
replace.28 = "$1"

regex.29 = """([u]?int)ptr_t"""
replace.29 = "ptr $1"

search.30 = "  font*"
comment.30 = 1

search.31 = """const
  FORMAT_R8G8B8 = FORMAT_COLOR_BEGIN
  FORMAT_COLOR_END = FORMAT_RGBA32
"""
move.31 = "{.importc: \"seq\".}: cuint\n\n"

search.32 = "proc font_config"
comment.32 = 2

## Convert all nk_* to have "struct" in front of them

regex.33 = "importc: \"(nk_(?:color|colorf|vec2|vec2i|rect|recti|image|cursor|scroll))\""
replace.33 = "importc: \"struct $1\""

regex.34 = "importc: \"(nk_(?:allocator|draw_null_texture|convert_config|list_view))\""
replace.34 = "importc: \"struct $1\""

regex.35 = "importc: \"(nk_(?:user_font_glyph|user_font|baked_font|font_config|font_glyph|font|font_atlas))\""
replace.35 = "importc: \"struct $1\""

regex.36 = "importc: \"(nk_(?:memory_status|buffer_marker|memory|buffer))\""
replace.36 = "importc: \"struct $1\""

regex.37 = "importc: \"(nk_(?:str|clipboard|text_undo_record|text_undo_state|text_edit))\""
replace.37 = "importc: \"struct $1\""

regex.38 = "importc: \"(nk_(?:command|command_scissor|command_line|command_curve|command_rect|command_rect_filled|command_rect_multi_color|command_triangle|command_triangle_filled|command_circle|command_circle_filled|command_arc|command_arc_filled|command_polygon|command_polygon_filled|command_polyline|command_image|command_custom|command_text|command_buffer))\""
replace.38 = "importc: \"struct $1\""

regex.39 = "importc: \"(nk_(?:mouse_button|mouse|key|keyboard|input))\""
replace.39 = "importc: \"struct $1\""

regex.40 = "importc: \"(nk_(?:draw_vertex_layout_element|draw_command|draw_list))\""
replace.40 = "importc: \"struct $1\""

regex.41 = "importc: \"(nk_(?:style_item|style_text|style_button|style_toggle|style_selectable|style_slider|style_progress|style_scrollbar|style_edit|style_property|style_chart|style_combo|style_tab|style_window_header|style_window|style))\""
replace.41 = "importc: \"struct $1\""

regex.42 = "importc: \"(nk_(?:chart_slot|chart|row_layout|popup_buffer|menu_state|panel))\""
replace.42 = "importc: \"struct $1\""

regex.43 = "importc: \"(nk_(?:popup_state|edit_state|property_state|window))\""
replace.43 = "importc: \"struct $1\""

regex.44 = "importc: \"(nk_config_stack_[a-z0-9_]+)\""
replace.44 = "importc: \"struct $1\""

regex.45 = "importc: \"(nk_configuration_stacks)\""
replace.45 = "importc: \"struct $1\""

regex.46 = "importc: \"(nk_(?:table|page_element|page|pool|context))\""
replace.46 = "importc: \"struct $1\""

## Ensure our plugin callbacks are cdecl

regex.47 = """(  plugin_[a-z]+\* = proc.+)"""
replace.47 = "$1 {.cdecl.}"
